# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool:
  vmImage: ubuntu-latest

#Define variables for environments
variables:
- name: DEV_ENVIRONMENT
  value: dev 

stages:
- stage: TerraformValidate
  jobs:
    - job: TerraformValidateJob
      continueOnError: false
      steps:
        - task: PublishPipelineArtifact@1
          displayName: Publish Artifacts
          inputs:
            targetPath: '$(System.DefaultWorkingDirectory)/aks-terraform'
            artifact: 'terraform-manifests-out'
            publishLocation: 'pipeline'
        - task: TerraformInstaller@0
          displayName: Terraform Install
          inputs:
            terraformVersion: 'latest'
        - task: TerraformCLI@0
          displayName: Terraform init
          inputs:
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/aks-terraform'
            backendType: 'azurerm'
            backendServiceArm: 'terrafrom-aks-sc'
            ensureBackend: true
            backendAzureRmResourceGroupName: 'terraform-storage-rg'
            backendAzureRmResourceGroupLocation: 'North Europe'
            backendAzureRmStorageAccountName: 'terraformstatestor80'
            backendAzureRmStorageAccountSku: 'Standard_LRS'
            backendAzureRmContainerName: 'terraformstate'
            backendAzureRmKey: 'aksterraform.tfstate'
            allowTelemetryCollection: false
        - task: TerraformCLI@0
          displayName: Terraform validate
          inputs:
            command: 'validate'
            workingDirectory: '$(System.DefaultWorkingDirectory)/aks-terraform'
            allowTelemetryCollection: false

- stage: PlanAKSCluster
  jobs:
    - deployment: PlanDevAksCluster
      displayName: PlanDevAksCluster
      pool:
        vmImage: 'ubuntu-latest'
      environment: $(DEV_ENVIRONMENT)      
      strategy: 
        runOnce:
         deploy:
           steps:
           - task: DownloadSecureFile@1
             displayName: Download SSH Key
             name: sshkey
             inputs:
              secureFile: 'aks.pub'
           - task: TerraformCLI@0
             displayName: Terraform Init
             inputs:
               command: 'init'
               workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
               backendType: 'azurerm'
               backendServiceArm: 'terrafrom-aks-sc'
               backendAzureRmResourceGroupName: 'terraform-storage-rg'
               backendAzureRmStorageAccountName: 'terraformstatestor80'
               backendAzureRmContainerName: 'terraform_state'
               backendAzureRmKey: 'aks_$(DEV_ENVIRONMENT)_terraform.tfstate'
               allowTelemetryCollection: false
           - task: TerraformCLI@0
             displayName: Terraform Plan
             inputs:
              command: 'plan'
              workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
              environmentServiceName: 'terrafrom-aks-sc'
              commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath)  -var environment=$(DEV_ENVIRONMENT) -out $(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
              allowTelemetryCollection: false

- stage: DeployAKSCluster
  jobs:
    - deployment: DeployDevAksCluster
      displayName: DeployDevAksCluster
      pool:
        vmImage: 'ubuntu-latest'
      environment: $(DEV_ENVIRONMENT)      
      strategy: 
        runOnce:
         deploy:
           steps:
           - task: DownloadSecureFile@1
             displayName: Download SSH Key
             name: sshkey
             inputs:
              secureFile: 'aks.pub'
           - task: TerraformCLI@0
             displayName: Terraform Init
             inputs:
               command: 'init'
               workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
               backendType: 'azurerm'
               backendServiceArm: 'terrafrom-aks-sc'
               backendAzureRmResourceGroupName: 'terraform-storage-rg'
               backendAzureRmStorageAccountName: 'terraformstatestor80'
               backendAzureRmContainerName: 'terraform_state'
               backendAzureRmKey: 'aks_$(DEV_ENVIRONMENT)_terraform.tfstate'
               allowTelemetryCollection: false
      
           - task: TerraformCLI@0
             displayName: Terraform Apply
             inputs:
               command: 'apply'
               workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
               environmentServiceName: 'terrafrom-aks-sc'
               commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath)  -var environment=$(DEV_ENVIRONMENT)'
               allowTelemetryCollection: false

- stage: DestroyAKSCluster
  jobs:
    - deployment: DestroyDevAksCluster
      displayName: DestroyDevAksCluster
      pool:
        vmImage: 'ubuntu-latest'
      environment: $(DEV_ENVIRONMENT)      
      strategy: 
        runOnce:
         deploy:
           steps:
           - task: DownloadSecureFile@1
             displayName: Download SSH Key
             name: sshkey
             inputs:
              secureFile: 'aks.pub'
           - task: TerraformCLI@0
             displayName: Terraform Init
             inputs:
               command: 'init'
               workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
               backendType: 'azurerm'
               backendServiceArm: 'terrafrom-aks-sc'
               backendAzureRmResourceGroupName: 'terraform-storage-rg'
               backendAzureRmStorageAccountName: 'terraformstatestor80'
               backendAzureRmContainerName: 'terraform_state'
               backendAzureRmKey: 'aks_$(DEV_ENVIRONMENT)_terraform.tfstate'
               allowTelemetryCollection: false
      
           - task: TerraformCLI@0
             displayName: Terraform Apply
             inputs:
               command: 'destroy'
               workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
               environmentServiceName: 'terrafrom-aks-sc'
               commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
               allowTelemetryCollection: false
